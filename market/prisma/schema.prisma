// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  // primary키 cuid:자동으로 만들어줌
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // fields 외래키 : userId   references참조키는 : id   onDelete해당 데이터를 지우면 해당유저의 account도 지워짐
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  User
  Admin
}

model User {
  id             String    @id @default(cuid())
  name           String?
  hashedPassword  String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  userType        UserType @default(User)

  products        Product[]
  favoriteIds     String[]

  conversations     Conversation[]
  sendMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  imageSrc    String
  category    String
  userId      String
  price       Int
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id    String @id @default(cuid())
  name String
  senderId String
  receiverId String
  users User[]
  messages Message[]
  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text String? //이미지만 올리수도 있기때문에 옵셔널
  image String? //텍스만 보낼수 있기때문에 옵셔널
  sender User @relation(name:"sender", fields: [senderId], references: [id])
  senderId String
  receiver User @relation(name:"receiver", fields: [receiverId], references: [id])
  receiverId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}
